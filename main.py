import discord
import asyncio
import json
import os
import re
import random
import yt_dlp
from discord.ext import commands, tasks
from discord.ui import Button, View
from collections import deque
from dotenv import load_dotenv

FAVORITES_FILE = 'favorites.json'

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TOKEN ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if TOKEN is None:
    print("Error: DISCORD_TOKEN is not set in .env")
    exit(1)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î intents
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.voice_states = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á bot
bot = commands.Bot(command_prefix='.', intents=intents)

@tasks.loop(minutes=5.0)
async def check_voice_activity():
    for guild in bot.guilds:
        if guild.voice_client:
            if len(guild.voice_client.channel.members) == 1 and guild.voice_client.channel.members[0] == guild.voice_client.user:
                await guild.voice_client.disconnect()
                print(f"Disconnected from {guild.voice_client.channel.name} due to inactivity.")

@bot.event
async def on_ready():
    if bot.user:
        print(f'Bot is online as {bot.user.name}')
    else:
        print('Bot user is not defined')
    check_voice_activity.start()

# ------------------------------------------------- MUSIC CONTROL -------------------------------------------------- #
class MusicControlView(View):
    def __init__(self, ctx):
        super().__init__(timeout=None)
        self.ctx = ctx

    # Group 1: Playback Controls
    @discord.ui.button(label="‚è∏Ô∏è", style=discord.ButtonStyle.secondary)
    async def pause_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await pause(self.ctx)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
    async def resume_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await resume(self.ctx)

    @discord.ui.button(label="‚è≠Ô∏è", style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await next_song(self.ctx)
    
    @discord.ui.button(label="‚èπÔ∏è", style=discord.ButtonStyle.secondary)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await stop(self.ctx)

    # Group 2: Playlist Controls
    @discord.ui.button(label="üíΩ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á", style=discord.ButtonStyle.secondary)
    async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await show_queue(self.ctx)

    # @discord.ui.button(label="üìª ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", style=discord.ButtonStyle.secondary)
    # async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
    #     await interaction.response.defer()
    #     await show_queue(self.ctx)

    @discord.ui.button(label="‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå", style=discord.ButtonStyle.secondary)
    async def add_favorite_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await add_favorite(self.ctx)
    
    @discord.ui.button(label="üé∞ ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå", style=discord.ButtonStyle.secondary)
    async def random_favorite_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await random_favorite(self.ctx)

    # Group 3: Control
    @discord.ui.button(label="HELP !", style=discord.ButtonStyle.primary)
    async def show_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await show_help(self.ctx)

    @discord.ui.button(label="LEAVE", style=discord.ButtonStyle.danger)
    async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await leave(self.ctx)

# class RadioControlView(View):
#     def __init__(self, ctx):
#         super().__init__(timeout=None)
#         self.ctx = ctx
    
#     @discord.ui.button(label="‚ÜîÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", style=discord.ButtonStyle.secondary)
#     async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_queue(self.ctx)
    
#     @discord.ui.button(label="üìª ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", style=discord.ButtonStyle.secondary)
#     async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_queue(self.ctx)

#     @discord.ui.button(label="HELP !", style=discord.ButtonStyle.primary)
#     async def show_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_help(self.ctx)
    
#     @discord.ui.button(label="LEAVE", style=discord.ButtonStyle.danger)
#     async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await leave(self.ctx)
        
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
music_queues = {}

@bot.event
async def on_ready():
    print(f"Bot is online as {bot.user}")

def get_youtube_info(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'quiet': True
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=False)
            return info_dict
    except Exception as e:
        print(f"Error fetching YouTube info: {e}")
        return None

async def play_next(ctx):
    global current_songs
    if ctx.guild.id in music_queues and music_queues[ctx.guild.id]:
        next_song = music_queues[ctx.guild.id].popleft()
        await play_song(ctx, next_song['url'])
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        if ctx.guild.id in current_songs:
            del current_songs[ctx.guild.id]

current_songs = {}

global playing_message
playing_message = None

async def play_song(ctx, url):
    global current_songs, playing_message
    voice_client = ctx.voice_client
    youtube_info = get_youtube_info(url)
    if youtube_info is None:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
        await asyncio.sleep(3)
        await message.delete()
        return
    youtube_url = youtube_info['url']
    title = youtube_info['title']
    thumbnail_url = youtube_info['thumbnail']  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 'thumbnail' ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏õ‡∏Å
    duration = youtube_info['duration']  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 'duration' ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ (‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô 4:20 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 260 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    minutes = duration // 60
    seconds = duration % 60
    duration_formatted = f"{minutes}:{str(seconds).zfill(2)}"  # ‡πÄ‡∏ä‡πà‡∏ô "4:20"
    ffmpeg_options = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn'
    }
    if voice_client.is_playing():
        voice_client.stop()
    audio_source = discord.FFmpegPCMAudio(youtube_url, **ffmpeg_options)
    current_songs[ctx.guild.id] = {'title': title, 'url': url}
    voice_client.play(audio_source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á
    embed = discord.Embed(
        title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á", 
        description=f"[`{title}`]({youtube_url})",  # ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=thumbnail_url)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á
    embed.set_footer(text=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {duration_formatted}")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÉ‡∏ô footer
    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    if playing_message:
        try:
            await playing_message.delete()  # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
        except discord.NotFound:
            pass  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    playing_message = await ctx.send(embed=embed)
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
    view = MusicControlView(ctx)
    await playing_message.edit(view=view)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á YouTube ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    youtube_url_pattern = re.compile(r'https?://(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/.+')
    if youtube_url_pattern.match(message.content):
        print(f"Received YouTube URL: {message.content}")
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô play ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        command = bot.get_command('play')
        if command:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏à‡∏≥‡∏•‡∏≠‡∏á
            ctx = await bot.get_context(message)
            await command.callback(ctx, url=message.content)
            print("Invoking play command directly.")
        else:
            print("Command 'play' not found.")
    await bot.process_commands(message)

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô', aliases=['play', 'p'])
async def play(ctx, url: str):
    if not ctx.author.voice:
        message = await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
        await asyncio.sleep(3)
        await message.delete()
        return
    channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await channel.connect()
    elif ctx.voice_client.channel != channel:
        await ctx.voice_client.move_to(channel)
    if ctx.guild.id not in music_queues:
        music_queues[ctx.guild.id] = deque()
    youtube_info = get_youtube_info(url)
    if youtube_info is None:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        await asyncio.sleep(3)
        await message.delete()
        return
    title = youtube_info.get('title', '‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å')
    if ctx.voice_client.is_playing():
        music_queues[ctx.guild.id].append({'url': url, 'title': title})
        message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á '{title}' ‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()
    else:
        await play_song(ctx, url)

@bot.command(name='‡∏ï‡πà‡∏≠‡πÑ‡∏õ', aliases=['next', 'n'])
async def next_song(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏Ñ‡∏¥‡∏ß', aliases=['queue', 'q'])
async def show_queue(ctx):
    if ctx.guild.id in music_queues and music_queues[ctx.guild.id]:
        queue_list = "\n".join([f"{i+1}. {song['title']}" for i, song in enumerate(music_queues[ctx.guild.id])])
        embed = discord.Embed(title="‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á", description=queue_list, color=discord.Color.green())
        message = await ctx.send(embed=embed)
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏´‡∏¢‡∏∏‡∏î', aliases=['stop', 's'])
async def pause(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        message = await ctx.send('‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠"')
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠', aliases=['continue', 'cn'])
async def resume(ctx):
    if ctx.voice_client and ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        message = await ctx.send("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á', aliases=['clear', 'clr'])
async def stop(ctx):
    if ctx.voice_client:
        ctx.voice_client.stop()
        if ctx.guild.id in music_queues:
            music_queues[ctx.guild.id].clear()
        message = await ctx.send("‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á', aliases=['remove', 'rm'])
async def remove_song(ctx, song_number: int):
    if ctx.guild.id not in music_queues or not music_queues[ctx.guild.id]:
        message = await ctx.send("‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
    if song_number < 1 or song_number > len(music_queues[ctx.guild.id]):
        message = await ctx.send(f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡πÅ‡∏•‡∏∞ {len(music_queues[ctx.guild.id])}")
        await asyncio.sleep(3)
        await message.delete()
    # ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if song_number == 1:
        removed_song = music_queues[ctx.guild.id].popleft()
    else:
        removed_song = music_queues[ctx.guild.id][song_number - 1]
        music_queues[ctx.guild.id].remove(removed_song)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ removed_song ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
    if removed_song is not None:
        message = await ctx.send(f"‡πÄ‡∏û‡∏•‡∏á '{removed_song['title']}' ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ', aliases=['leave', 'l'])
async def leave(ctx):
    global playing_message
    if ctx.voice_client:
        await ctx.voice_client.disconnect()  # ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if ctx.guild.id in music_queues:
            music_queues[ctx.guild.id].clear()  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á
    # ‡∏•‡∏ö playing_message ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if playing_message:
        try:
            await playing_message.delete()
        except discord.NotFound:
            pass  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏°‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    message = await ctx.send("‡∏≠‡∏≠‡∏°‡∏°‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß üò¢")
    await asyncio.sleep(3)
    await message.delete()

@bot.command(name='‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠', aliases=['assist', 'guide', 'h'])
async def show_help(ctx):
    embed = discord.Embed(title="üìï ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏û‡∏µ‡πà‡∏≠‡∏≠‡∏°", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á",)
    embed.add_field(name="> `‡πÄ‡∏•‡πà‡∏ô, play, p <‡∏•‡∏¥‡∏á‡∏Å‡πå>`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏π‡∏ó‡∏π‡∏õ", inline=False)
    embed.add_field(name="> `‡∏ï‡πà‡∏≠‡πÑ‡∏õ, next, n`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á, remove, rm <‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç>`", value="‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏Ñ‡∏¥‡∏ß, queue, q`", value="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á, clear, clr`", value="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", inline=False)
    embed.add_field(name="> `‡∏´‡∏¢‡∏∏‡∏î, stop, s`", value="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", inline=False)
    embed.add_field(name="> `‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠, continue, con`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", inline=False)
    embed.add_field(name="> `‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ, leave, l`", value="‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á", inline=False)
    embed.add_field(name="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value="`.p https://www.youtube.com/xxx/?`", inline=False)
    embed.add_field(name="üí• New! ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á", value="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `.p` ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞", inline=False)
    embed.set_image(url="https://embed.pixiv.net/artwork.php?illust_id=90077277&mdate=1621870500")
    embed.set_footer(text="‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• BOT")
    message = await ctx.send(embed=embed)
    await asyncio.sleep(15)
    await message.delete()

# @bot.command(name='‡∏û‡∏µ‡πà‡∏≠‡∏≠‡∏°', aliases=['aommy'])
# async def next_song(ctx):
#     message = await ctx.send("‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏Ñ‡∏∞?")
#     await asyncio.sleep(5)
#     await message.delete()

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å JSON
def load_favorites():
    if not os.path.exists(FAVORITES_FILE):
        return []  # Return an empty list if the file doesn't exist
    with open(FAVORITES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_favorites(favorites):
    with open(FAVORITES_FILE, 'w', encoding="utf-8") as f:
        json.dump(favorites, f, ensure_ascii=False, indent=2)

@bot.command(name='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î')
async def add_favorite(ctx):
    global current_songs
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    if ctx.guild.id not in current_songs:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    current_song = current_songs[ctx.guild.id]
    favorites = load_favorites()
    new_favorite = {'title': current_song['title'], 'url': current_song['url']}
    if new_favorite not in favorites:
        favorites.append(new_favorite)
        save_favorites(favorites)
        message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏° '{current_song['title']}' ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send(f"'{current_song['title']}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î')
async def random_favorite(ctx):
    favorites = load_favorites()
    if not favorites:
        message = await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
    random.shuffle(favorites)
    selected_songs = favorites[:10]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡πÄ‡∏û‡∏•‡∏á
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
    for song in selected_songs:
        if ctx.guild.id not in music_queues:
            music_queues[ctx.guild.id] = deque()
        music_queues[ctx.guild.id].append(song)
    # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        await play_next(ctx)
    message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {len(selected_songs)} ‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
    await asyncio.sleep(3)
    await message.delete()

# END OF MUSIC CONTROL

# -------------------------------------------- WELCOME/GOODBYE MESSAGE -------------------------------------------- #
@bot.event
async def on_member_join(member):
    # ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á Welcome Message
    channel = bot.get_channel(952617523847778394)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    guild = member.guild
    role = guild.get_role(878607127126634496)
    
    if role:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ Role ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await member.add_roles(role)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    if channel:
        embed = discord.Embed(
            title="\u200B\nüò§ **‡∏°‡∏∏‡πà ‡∏á ‡∏™‡∏π ‡∏î ‡∏î ‡∏° ‡∏Å ‡∏≤ ‡∏ß ‡πÅ ‡∏• ‡∏∞ ‡∏Ç ‡∏≠ ‡∏á ‡πÄ ‡∏´ ‡∏• ‡∏ß** üçª",
            description=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {member.mention}\n‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà {role.mention} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏¥‡∏•‡∏î‡πå!",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=member.avatar.url)
        channel_id = 1264512768351141901  # ‡πÉ‡∏™‡πà channel ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå
        embed.add_field(
            name="\u200B\nüìÉ **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢**",
            value=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ \n<#{channel_id}>\n",
            inline=False
        )

        embed.add_field(
            name="\nüí¨ **‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤**",
            value="‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ï‡∏ï‡πà‡∏≤‡∏á‡πÜ!",
            inline=False
        )
        embed.set_footer(
            text="\nüéâ ‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ"
        )
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(952617523847778394)
    if channel:
        embed = discord.Embed(
            title="üëã üëã üëã üëã üëã üëã üëã",
            description=f"{member.name} ‡πÑ‡∏î‡πâ‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ {member.guild.name}!",
            color=discord.Color.red()
        )
        embed.set_thumbnail(url=member.avatar.url)
        await channel.send(embed=embed)

# END WELCOME/GOODBYE MESSAGE

bot.run(TOKEN)