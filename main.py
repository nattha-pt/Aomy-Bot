import discord
import asyncio
import json
import os
import re
import random
import yt_dlp
from discord.ext import commands, tasks
from discord.ui import Button, View
from collections import deque
from dotenv import load_dotenv

FAVORITES_FILE = 'favorites.json'

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TOKEN ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if TOKEN is None:
    print("Error: DISCORD_TOKEN is not set in .env")
    exit(1)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î intents
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.voice_states = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á bot
bot = commands.Bot(command_prefix='.', intents=intents)

@tasks.loop(minutes=5.0)
async def check_voice_activity():
    for guild in bot.guilds:
        if guild.voice_client:
            if len(guild.voice_client.channel.members) == 1 and guild.voice_client.channel.members[0] == guild.voice_client.user:
                await guild.voice_client.disconnect()
                print(f"Disconnected from {guild.voice_client.channel.name} due to inactivity.")

@bot.event
async def on_ready():
    if bot.user:
        print(f'Bot is online as {bot.user.name}')
    else:
        print('Bot user is not defined')
    check_voice_activity.start()

# ------------------------------------------------- MUSIC CONTROL -------------------------------------------------- #
class MusicControlView(View):
    def __init__(self, ctx):
        super().__init__(timeout=None)
        self.ctx = ctx

    # Group 1: Playback Controls
    @discord.ui.button(label="‚è∏Ô∏è", style=discord.ButtonStyle.secondary)
    async def pause_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await pause(self.ctx)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
    async def resume_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await resume(self.ctx)

    @discord.ui.button(label="‚è≠Ô∏è", style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await next_song(self.ctx)
    
    @discord.ui.button(label="‚èπÔ∏è", style=discord.ButtonStyle.secondary)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await stop(self.ctx)

    # Group 2: Playlist Controls
    @discord.ui.button(label="üíΩ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á", style=discord.ButtonStyle.secondary)
    async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await show_queue(self.ctx)

    # @discord.ui.button(label="üìª ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", style=discord.ButtonStyle.secondary)
    # async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
    #     await interaction.response.defer()
    #     await show_queue(self.ctx)

    @discord.ui.button(label="‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå", style=discord.ButtonStyle.secondary)
    async def add_favorite_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await add_favorite(self.ctx)
    
    @discord.ui.button(label="üé∞ ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå", style=discord.ButtonStyle.secondary)
    async def random_favorite_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await random_favorite(self.ctx)

    # Group 3: Control
    @discord.ui.button(label="HELP !", style=discord.ButtonStyle.primary)
    async def show_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await show_help(self.ctx)

    @discord.ui.button(label="LEAVE", style=discord.ButtonStyle.danger)
    async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await leave(self.ctx)

# class RadioControlView(View):
#     def __init__(self, ctx):
#         super().__init__(timeout=None)
#         self.ctx = ctx
    
#     @discord.ui.button(label="‚ÜîÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", style=discord.ButtonStyle.secondary)
#     async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_queue(self.ctx)
    
#     @discord.ui.button(label="üìª ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", style=discord.ButtonStyle.secondary)
#     async def queue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_queue(self.ctx)

#     @discord.ui.button(label="HELP !", style=discord.ButtonStyle.primary)
#     async def show_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await show_help(self.ctx)
    
#     @discord.ui.button(label="LEAVE", style=discord.ButtonStyle.danger)
#     async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
#         await interaction.response.defer()
#         await leave(self.ctx)
        
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
music_queues = {}

@bot.event
async def on_ready():
    print(f"Bot is online as {bot.user}")

def get_youtube_info(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'quiet': True
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=False)
            return info_dict
    except Exception as e:
        print(f"Error fetching YouTube info: {e}")
        return None

async def play_next(ctx):
    global current_songs
    if ctx.guild.id in music_queues and music_queues[ctx.guild.id]:
        next_song = music_queues[ctx.guild.id].popleft()
        await play_song(ctx, next_song['url'])
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        if ctx.guild.id in current_songs:
            del current_songs[ctx.guild.id]

current_songs = {}

global playing_message
playing_message = None

async def play_song(ctx, url):
    global current_songs, playing_message
    voice_client = ctx.voice_client
    youtube_info = get_youtube_info(url)
    if youtube_info is None:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
        await asyncio.sleep(3)
        await message.delete()
        return
    youtube_url = youtube_info['url']
    title = youtube_info['title']
    thumbnail_url = youtube_info['thumbnail']
    duration = youtube_info['duration']
    minutes = duration // 60
    seconds = duration % 60
    duration_formatted = f"{minutes}:{str(seconds).zfill(2)}"
    ffmpeg_options = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn'
    }
    if voice_client.is_playing():
        voice_client.stop()
    audio_source = discord.FFmpegPCMAudio(youtube_url, **ffmpeg_options)
    current_songs[ctx.guild.id] = {'title': title, 'url': url}
    voice_client.play(audio_source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))
    embed = discord.Embed(
        title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á", 
        description=f"[`{title}`]({url})",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=thumbnail_url)
    embed.set_footer(text=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {duration_formatted}")
    if playing_message:
        try:
            await playing_message.delete()
        except discord.NotFound:
            pass
    playing_message = await ctx.send(embed=embed)
    view = MusicControlView(ctx)
    await playing_message.edit(view=view)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if not message.guild:
        return
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á YouTube ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    youtube_url_pattern = re.compile(r'https?://(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/.+')
    if youtube_url_pattern.match(message.content):
        print(f"Received YouTube URL: {message.content}")
        command = bot.get_command('play')
        if command:
            ctx = await bot.get_context(message)
            await command.callback(ctx, url=message.content)
            print("Invoking play command directly.")
            await message.delete()
        else:
            print("Command 'play' not found.")
    await bot.process_commands(message)

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô', aliases=['play', 'p'])
async def play(ctx, url: str):
    if not ctx.author.voice:
        message = await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
        await asyncio.sleep(3)
        await message.delete()
        return
    channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await channel.connect()
    elif ctx.voice_client.channel != channel:
        await ctx.voice_client.move_to(channel)
    if ctx.guild.id not in music_queues:
        music_queues[ctx.guild.id] = deque()
    youtube_info = get_youtube_info(url)
    if youtube_info is None:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        await asyncio.sleep(3)
        await message.delete()
        return
    title = youtube_info.get('title', '‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å')
    if ctx.voice_client.is_playing():
        music_queues[ctx.guild.id].append({'url': url, 'title': title})
        message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á '{title}' ‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()
    else:
        await play_song(ctx, url)

@bot.command(name='‡∏ï‡πà‡∏≠‡πÑ‡∏õ', aliases=['next', 'n'])
async def next_song(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏Ñ‡∏¥‡∏ß', aliases=['queue', 'q'])
async def show_queue(ctx):
    if ctx.guild.id in music_queues and music_queues[ctx.guild.id]:
        queue_list = "\n".join([f"{i+1}. {song['title']}" for i, song in enumerate(music_queues[ctx.guild.id])])
        embed = discord.Embed(title="‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á", description=queue_list, color=discord.Color.green())
        message = await ctx.send(embed=embed)
        await asyncio.sleep(5)
        await message.delete()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏´‡∏¢‡∏∏‡∏î', aliases=['stop', 's'])
async def pause(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        message = await ctx.send('‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ".‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠", ".continue", ".cn" ‡∏´‡∏£‡∏∑‡∏≠ ‚ñ∂Ô∏è')
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠', aliases=['continue', 'cn'])
async def resume(ctx):
    if ctx.voice_client and ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        message = await ctx.send("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á', aliases=['clear', 'clr'])
async def stop(ctx):
    if ctx.voice_client:
        ctx.voice_client.stop()
        if ctx.guild.id in music_queues:
            music_queues[ctx.guild.id].clear()
        message = await ctx.send("‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á', aliases=['remove', 'rm'])
async def remove_song(ctx, song_number: int):
    if ctx.guild.id not in music_queues or not music_queues[ctx.guild.id]:
        message = await ctx.send("‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
    if song_number < 1 or song_number > len(music_queues[ctx.guild.id]):
        message = await ctx.send(f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡πÅ‡∏•‡∏∞ {len(music_queues[ctx.guild.id])}")
        await asyncio.sleep(3)
        await message.delete()
    if song_number == 1:
        removed_song = music_queues[ctx.guild.id].popleft()
    else:
        removed_song = music_queues[ctx.guild.id][song_number - 1]
        music_queues[ctx.guild.id].remove(removed_song)
    if removed_song is not None:
        message = await ctx.send(f"‡πÄ‡∏û‡∏•‡∏á '{removed_song['title']}' ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ', aliases=['leave', 'l'])
async def leave(ctx):
    global playing_message
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        if ctx.guild.id in music_queues:
            music_queues[ctx.guild.id].clear()
    if playing_message:
        try:
            await playing_message.delete()
        except discord.NotFound:
            pass
    message = await ctx.send("‡∏≠‡∏≠‡∏°‡∏°‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß üò¢")
    await asyncio.sleep(3)
    await message.delete()

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å JSON
def load_favorites():
    if not os.path.exists(FAVORITES_FILE):
        return []
    with open(FAVORITES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_favorites(favorites):
    with open(FAVORITES_FILE, 'w', encoding="utf-8") as f:
        json.dump(favorites, f, ensure_ascii=False, indent=2)

@bot.command(name='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î')
async def add_favorite(ctx):
    global current_songs
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    if ctx.guild.id not in current_songs:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    current_song = current_songs[ctx.guild.id]
    favorites = load_favorites()
    new_favorite = {'title': current_song['title'], 'url': current_song['url']}
    if new_favorite not in favorites:
        favorites.append(new_favorite)
        save_favorites(favorites)
        message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏° '{current_song['title']}' ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send(f"'{current_song['title']}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()

@bot.command(name='‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î')
async def random_favorite(ctx):
    favorites = load_favorites()
    if not favorites:
        message = await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡πà‡∏∞")
        await asyncio.sleep(3)
        await message.delete()
        return
    random.shuffle(favorites)
    selected_songs = favorites[:10]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡πÄ‡∏û‡∏•‡∏á
    for song in selected_songs:
        if ctx.guild.id not in music_queues:
            music_queues[ctx.guild.id] = deque()
        music_queues[ctx.guild.id].append(song)
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        await play_next(ctx)
    message = await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {len(selected_songs)} ‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
    await asyncio.sleep(3)
    await message.delete()

# END OF MUSIC CONTROL

# ------------------------------------------------- MANAGEMENT CONTROL -------------------------------------------------- #

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á HELP
@bot.command(name='‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠', aliases=['assist', 'guide', 'h'])
async def show_help(ctx):
    embed = discord.Embed(title="üìï ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏û‡∏µ‡πà‡∏≠‡∏≠‡∏°", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á",)
    embed.add_field(name="> `‡πÄ‡∏•‡πà‡∏ô, play, p <‡∏•‡∏¥‡∏á‡∏Å‡πå>`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏π‡∏ó‡∏π‡∏õ", inline=False)
    embed.add_field(name="> `‡∏ï‡πà‡∏≠‡πÑ‡∏õ, next, n`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á, remove, rm <‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç>`", value="‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏Ñ‡∏¥‡∏ß, queue, q`", value="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", inline=False)
    embed.add_field(name="> `‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á, clear, clr`", value="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", inline=False)
    embed.add_field(name="> `‡∏´‡∏¢‡∏∏‡∏î, stop, s`", value="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", inline=False)
    embed.add_field(name="> `‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠, continue, con`", value="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", inline=False)
    embed.add_field(name="> `‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ, leave, l`", value="‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á", inline=False)
    embed.add_field(name="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value="`.p https://www.youtube.com/xxx/?`", inline=False)
    embed.add_field(name="üí• New! ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á", value="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `.p` ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞", inline=False)
    embed.set_image(url="https://i.pinimg.com/736x/7c/c5/fe/7cc5fe1ff9fa28395e8b4ac00029dec4.jpg")
    embed.set_footer(text="‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• BOT")
    message = await ctx.send(embed=embed)
    await asyncio.sleep(15)
    await message.delete()

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
@bot.command(name='‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó', aliases=['dbotmsg', 'delbotmsg'])
async def delete_bot_messages(ctx):
    async for msg in ctx.channel.history(limit=50):
        if msg.author == bot.user:
            await msg.delete()

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@bot.command(name='‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', aliases=['dmsg', 'delmsg'])
async def delete_mentioned_messages(ctx, user: discord.User = None):
    if user is None:
        message = await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô: `.delmsg @user`")
        await asyncio.sleep(3)
        await message.delete()
        return
    if not ctx.channel.permissions_for(ctx.author).manage_messages:
        message = await ctx.send("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
        await asyncio.sleep(3)
        await message.delete()
        return
    try:
        async for msg in ctx.channel.history(limit=20):
            if msg.author == user:
                await msg.delete()
        message = await ctx.send(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á {user.mention} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        await asyncio.sleep(3)
        await message.delete()
    except discord.errors.Forbidden:
        message = await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
        await asyncio.sleep(3)
        await message.delete()
    except discord.errors.HTTPException as e:
        message = await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {e}")
        await asyncio.sleep(3)
        await message.delete()

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
@bot.command(name='‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', aliases=['disall', 'disconnectall'])
@commands.has_permissions(move_members=True)  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå "Move Members"
async def disconnect_all(ctx):
    if ctx.author.voice and ctx.author.voice.channel:
        voice_channel = ctx.author.voice.channel
        disconnected_count = 0
        for member in voice_channel.members:
            try:
                await member.move_to(None)
                disconnected_count += 1
            except Exception as e:
                await ctx.send(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {member} ‡πÑ‡∏î‡πâ: {e}")
        message = await ctx.send(f"‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {disconnected_count} ‡∏Ñ‡∏ô")
        await asyncio.sleep(3)
        await message.delete()
    else:
        message = await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        await asyncio.sleep(3)
        await message.delete()

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
@bot.command(name='‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', aliases=['dis', 'disconnect'])
@commands.has_permissions(move_members=True)  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå "Move Members"
async def disconnect_member(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô: `.dis @user`")
        return
    if member.voice:
        try:
            await member.move_to(None)
            message = await ctx.send(f"‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {member.mention} ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            await asyncio.sleep(3)
            await message.delete()
        except Exception as e:
            message = await ctx.send(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {member.mention} ‡πÑ‡∏î‡πâ: {e}")
            await asyncio.sleep(3)
            await message.delete()
    else:
        message = await ctx.send(f"{member.mention} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        await asyncio.sleep(3)
        await message.delete()

# END OF MANAGEMENT CONTROL

# -------------------------------------------- OTHER -------------------------------------------- #

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
@bot.command(name='‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ', aliases=['food', '‡∏´‡∏¥‡∏ß'])
async def random_food(ctx):
    array1 = ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏ô", "‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô", "‡∏≠‡∏∑‡∏°‡∏°...", "‡∏ï‡πâ‡∏≠‡∏á"]
    array2 = [
        "‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß", "‡∏ú‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤", "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß", 
        "‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô", 
        "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á", "‡∏™‡πâ‡∏°‡∏ï‡∏≥", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢", "‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏ß",
        "‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°", "‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà", "‡∏Å‡∏∏‡πâ‡∏á‡∏≠‡∏ö‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
        "‡∏ã‡∏π‡∏ä‡∏¥", "‡∏£‡∏≤‡πÄ‡∏°‡∏ô", "‡∏ó‡∏≤‡πÇ‡∏Å‡∏¢‡∏≤‡∏Å‡∏¥", "‡∏ã‡∏≤‡∏ä‡∏¥‡∏°‡∏¥", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô", 
        "‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏ß‡∏ã‡πà‡∏≤", "‡∏ö‡∏π‡πÄ‡∏î‡∏à‡∏¥‡πÄ‡∏Å", "‡∏Å‡∏¥‡∏°‡∏à‡∏¥", "‡∏ö‡∏¥‡∏ö‡∏¥‡∏°‡∏ö‡∏±‡∏ö", "‡πÅ‡∏´‡∏ô‡∏°", 
        "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏ö", "‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", 
        "‡πÇ‡∏à‡πä‡∏Å‡∏´‡∏°‡∏π", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π", "‡∏´‡∏≠‡∏¢‡∏•‡∏≤‡∏¢‡∏≠‡∏ö‡πÄ‡∏ô‡∏¢", "‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡∏ô‡∏≤‡∏£‡πà‡∏≤", 
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå", "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤", "‡∏™‡πÄ‡∏ï‡πá‡∏Å", "‡∏ü‡∏¥‡∏ä‡πÅ‡∏≠‡∏ô‡∏î‡πå‡∏ä‡∏¥‡∏õ‡∏™‡πå",
        "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤", "‡∏´‡∏ô‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏≠‡∏ö", "‡∏™‡πâ‡∏ô üë£ ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
        "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ç‡∏≤‡∏´‡∏°‡∏≤", "‡∏Å‡∏£‡∏∞‡∏£‡∏≠‡∏Å‡∏ú‡∏±‡∏î‡πÄ‡∏ú‡πá‡∏î", "‡∏´‡∏°‡∏π‡πÄ‡∏î‡πâ‡∏á‡∏ú‡∏±‡∏î‡∏ú‡∏á‡∏Å‡∏£‡∏∞‡∏´‡∏£‡∏µ‡πà",
        "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÑ‡∏î‡πÇ‡∏î‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡πÑ‡∏ã‡∏ö‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "‡πÅ‡∏°‡∏ß‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥",
    ]
    phrase = random.choice(array1)
    food = random.choice(array2)
    await ctx.send(f'‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á {ctx.author.mention} {phrase} "{food}"')

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà‡∏î‡∏π‡∏î‡∏ß‡∏á
cards = [
    {"name": "The Fool", "meaning": "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏£‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏á‡∏™‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡∏™‡∏£‡∏∞", "emoji": "üé≠", "luck": random.randint(1, 5)},
    {"name": "The Magician", "meaning": "‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å", "emoji": "‚ú®", "luck": random.randint(1, 5)},
    {"name": "The High Priestess", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", "emoji": "üîÆ", "luck": random.randint(1, 5)},
    {"name": "The Empress", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•", "emoji": "üë∏", "luck": random.randint(1, 5)},
    {"name": "The Emperor", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥", "emoji": "ü§¥", "luck": random.randint(1, 5)},
    {"name": "The Hierophant", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤ ‡∏Ç‡∏ô‡∏ö‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°", "emoji": "üìú", "luck": random.randint(1, 5)},
    {"name": "The Lovers", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á", "emoji": "üíë", "luck": random.randint(1, 5)},
    {"name": "The Chariot", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à", "emoji": "üöó", "luck": random.randint(1, 5)},
    {"name": "Strength", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à", "emoji": "ü¶Å", "luck": random.randint(1, 5)},
    {"name": "The Hermit", "meaning": "‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏µ‡∏Å‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", "emoji": "üèûÔ∏è", "luck": random.randint(1, 5)},
    {"name": "Wheel of Fortune", "meaning": "‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™", "emoji": "üé°", "luck": random.randint(1, 5)},
    {"name": "Justice", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á", "emoji": "‚öñÔ∏è", "luck": random.randint(1, 5)},
    {"name": "The Hanged Man", "meaning": "‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà", "emoji": "üîó", "luck": random.randint(1, 5)},
    {"name": "Death", "meaning": "‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", "emoji": "‚ò†Ô∏è", "luck": random.randint(1, 5)},
    {"name": "Temperance", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Å‡∏≤‡∏£‡∏≠‡∏î‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏°‡∏Å‡∏•‡∏∑‡∏ô", "emoji": "üåà", "luck": random.randint(1, 5)},
    {"name": "The Devil", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏á‡πÉ‡∏´‡∏• ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏•‡∏† ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î", "emoji": "üòà", "luck": random.randint(1, 5)},
    {"name": "The Tower", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß", "emoji": "üåã", "luck": random.randint(1, 5)},
    {"name": "The Star", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á ‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡∏™‡∏∏‡∏Ç", "emoji": "‚≠ê", "luck": random.randint(1, 5)},
    {"name": "The Moon", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô", "emoji": "üåô", "luck": random.randint(1, 5)},
    {"name": "The Sun", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "emoji": "üåû", "luck": random.randint(1, 5)},
    {"name": "Judgement", "meaning": "‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏£‡∏π‡πâ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", "emoji": "üé∫", "luck": random.randint(1, 5)},
    {"name": "The World", "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", "emoji": "üåç", "luck": random.randint(1, 5)}
]

suits = {
    "Cups": "üíß",
    "Swords": "‚öîÔ∏è",
    "Wands": "üî•",
    "Pentacles": "üí∞"
}

@bot.command(name="draw")
async def draw_card(ctx):
    suit_name = random.choice(list(suits.keys()))  # ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏∏‡∏î‡πÑ‡∏û‡πà (Cups, Swords, Wands, Pentacles)
    suit_emoji = suits[suit_name]  # ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö emoji ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
    card = random.choice(cards)
    embed = discord.Embed(
        title=f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÑ‡∏û‡πà: {card['name']} {card['emoji']} {suit_emoji}",
        description=card['meaning'],
        color=discord.Color.gold()
    )
    embed.add_field(name="‡πÇ‡∏ä‡∏Ñ", value=f"{'‚≠ê' * card['luck']}", inline=False)
    embed.set_footer(text="‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞!")
    await ctx.send(embed=embed)

# END OF OTHER

# -------------------------------------------- WELCOME/GOODBYE MESSAGE -------------------------------------------- #
@bot.event
async def on_member_join(member):
    # ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á Welcome Message
    channel = bot.get_channel(952617523847778394)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    guild = member.guild
    role = guild.get_role(878607127126634496)
    
    if role:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ Role ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await member.add_roles(role)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    if channel:
        embed = discord.Embed(
            title="\u200B\nüò§ **‡∏°‡∏∏‡πà ‡∏á ‡∏™‡∏π ‡∏î ‡∏î ‡∏° ‡∏Å ‡∏≤ ‡∏ß ‡πÅ ‡∏• ‡∏∞ ‡∏Ç ‡∏≠ ‡∏á ‡πÄ ‡∏´ ‡∏• ‡∏ß** üçª",
            description=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {member.mention}\n‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà {role.mention} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏¥‡∏•‡∏î‡πå!",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=member.avatar.url)
        channel_id = 1264512768351141901  # ‡πÉ‡∏™‡πà channel ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå
        embed.add_field(
            name="\u200B\nüìÉ **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢**",
            value=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ \n<#{channel_id}>\n",
            inline=False
        )

        embed.add_field(
            name="\nüí¨ **‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤**",
            value="‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ï‡∏ï‡πà‡∏≤‡∏á‡πÜ!",
            inline=False
        )
        embed.set_footer(
            text="\nüéâ ‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ"
        )
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(952617523847778394)
    if channel:
        embed = discord.Embed(
            title="üëã üëã üëã üëã üëã üëã üëã",
            description=f"{member.name} ‡πÑ‡∏î‡πâ‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ {member.guild.name}!",
            color=discord.Color.red()
        )
        embed.set_thumbnail(url=member.avatar.url)
        await channel.send(embed=embed)

# END WELCOME/GOODBYE MESSAGE

bot.run(TOKEN)